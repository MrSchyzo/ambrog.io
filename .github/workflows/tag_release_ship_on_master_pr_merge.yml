name: 'Tag, Release, and Ship on Docker'
on:
  pull_request_target:
    types:
      - 'closed'
    paths-ignore:
      - '.github/**'
      - '.git*'
      - 'git_config/**'
      - 'docs/**'
      - 'Makefile'
      - '**.md'
    branches:
      - master

jobs:
  github-tag:
    runs-on: ubuntu-22.04
    name: Compute, bake, and push git tag
    outputs:
      tag: ${{ steps.tagging.outputs.tag }}
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: 'master'
          ssh-key: ${{ secrets.GH_CI_BOT_KEY }}
      - name: Install JQ
        run: sudo apt install -y jq
      - name: Fetch tags
        run: |
          git config --global user.email "${{ secrets.GH_CI_BOT_EMAIL }}"
          git config --global user.name "CI Bot"
          git fetch --tags --unshallow --prune
      - name: Compute Tag
        id: tagging
        env:
          GITHUB_TOKEN: ${{ secrets.GH_CI_BOT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_CI_BOT_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          set -exov pipefail
          echo "Pull Request $PR_NUMBER has been merged."
          highest_tag=`git tag --sort=v:refname | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' | tail -n 1` || highest_tag="0.0.0"
          tag_bits=(${highest_tag//./ })
          major=${tag_bits[0]}
          minor=${tag_bits[1]}
          patch=${tag_bits[2]}
          label_name=`gh pr view $PR_NUMBER --json labels| jq -r '.labels[].name' | grep -E 'minor|major|patch' | head -n 1`
          if [[ $label_name =~ "major" ]]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [[ $label_name =~ "minor" ]]; then
            minor=$((minor+1))
            patch=0
          elif [[ $label_name =~ "patch" ]]; then
            patch=$((patch+1))
          fi
          new_tag="$major.$minor.$patch"
          floating_tag="v$major"
          sed -i -E 's/pub const VERSION: &str = "[^"]*";/pub const VERSION: \&str = "'$new_tag'";/g' bin/src/info.rs
          git commit -a --amend --no-edit
          git push --force-with-lease
          git tag $new_tag
          git tag -f $floating_tag
          git push origin $new_tag
          git push -f origin $floating_tag
          echo "tag=$new_tag" | tee $GITHUB_OUTPUT
  
  publish-release:
    runs-on: ubuntu-22.04
    name: Release tag ${{ needs.github-tag.outputs.tag }}
    needs:
      - github-tag
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.github-tag.outputs.tag }}
      - name: Fetch all tags
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "Github actions"
          git fetch --tags --unshallow --prune
      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=${{ needs.github-tag.outputs.tag }}
          gh release create $latest_tag --generate-notes

  containerize:
    runs-on: ubuntu-22.04
    name: Ship container for tag ${{ needs.github-tag.outputs.tag }}
    needs:
      - github-tag
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.github-tag.outputs.tag }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install lld
        run: sudo apt install -y lld
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-release-cargo-
      - name: Build executable
        run: cargo build --release
      - name: Some debug
        run: |
          pwd
          ls -halt target/** || true
          find -iname 'release' || true
          find -iname 'ambrogio_bin' || true
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            "app_version=${{ needs.github-tag.outputs.tag }}"
          push: true
          tags: "mrschyzo/ambrogio:latest,mrschyzo/ambrogio:${{ needs.github-tag.outputs.tag }}"
      - name: Open me to see the docker image version
        run: echo "ðŸ“¦ Container version is ${{ needs.github-tag.outputs.tag }} ðŸ“¦"
